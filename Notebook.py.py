# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SPKcV95CAZtmwlBhJj0ib5D9mMSOvh_P
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://jupiter.money/contact/"
headers = {"User-Agent": "Mozilla/5.0"}

response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, 'html.parser')

faq_section = soup.find('ul', {'data-controller': 'faq'})
faq_items = faq_section.find_all('li')

faq_data = []
for item in faq_items:
    question = item.find('span').get_text(strip=True) if item.find('span') else ''
    answer = item.find('p').get_text(strip=True) if item.find('p') else ''
    if question and answer:
        faq_data.append({'question': question, 'answer': answer})

# Save as CSV
df = pd.DataFrame(faq_data)
df.to_csv('faq_raw.csv', index=False)

import re

def clean_text(text):
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    return text

df['question_cleaned'] = df['question'].str.lower().str.replace(r'[^\w\s]', '', regex=True)

df = df.drop_duplicates(subset='question_cleaned')

def categorize(question):
    if any(keyword in question.lower() for keyword in ['kyc', 'identity']):
        return 'KYC'
    elif any(keyword in question.lower() for keyword in ['reward', 'point']):
        return 'Rewards'
    elif any(keyword in question.lower() for keyword in ['payment', 'upi', 'transfer']):
        return 'Payments'
    elif any(keyword in question.lower() for keyword in ['limit', 'balance']):
        return 'Limits'
    else:
        return 'General'

df['category'] = df['question'].apply(categorize)

#!pip install transformers sentencepiece

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch

tokenizer = AutoTokenizer.from_pretrained("prithivida/parrot_paraphraser_on_T5")
model = AutoModelForSeq2SeqLM.from_pretrained("prithivida/parrot_paraphraser_on_T5")

def paraphrase_answer(answer, num_return_sequences=1):
    text = f"paraphrase: {answer} </s>"
    encoding = tokenizer.encode_plus(text, padding='longest', return_tensors="pt")
    input_ids, attention_mask = encoding["input_ids"], encoding["attention_mask"]

    outputs = model.generate(
        input_ids=input_ids,
        attention_mask=attention_mask,
        max_length=256,
        do_sample=True,
        top_k=120,
        top_p=0.95,
        early_stopping=True,
        num_return_sequences=num_return_sequences
    )

    return [tokenizer.decode(output, skip_special_tokens=True) for output in outputs]

# Example usage
original = "You can update your KYC details from the app under Profile > KYC."
print(paraphrase_answer(original))

df['rephrased_answer'] = df['answer'].apply(lambda x: paraphrase_answer(x)[0])

#!pip install sentence-transformers faiss-cpu

from sentence_transformers import SentenceTransformer
import numpy as np

model = SentenceTransformer('all-MiniLM-L6-v2')  # small, fast, good quality

faq_questions = df['question'].tolist()
faq_embeddings = model.encode(faq_questions, show_progress_bar=True)

import faiss

dimension = faq_embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(np.array(faq_embeddings))

def find_similar_faqs(query, top_k=3):
    query_embedding = model.encode([query])
    distances, indices = index.search(np.array(query_embedding), top_k)
    results = []
    for idx in indices[0]:
        question = df.iloc[idx]['question']
        answer = df.iloc[idx]['rephrased_answer']
        results.append((question, answer))
    return results

query = "Where do I change my KYC details?"
for q, a in find_similar_faqs(query):
    print(f"Matched FAQ: {q}\nAnswer: {a}\n")

def find_best_faq_match(query, threshold=0.4):  # adjust threshold as needed
    query_embedding = model.encode([query])
    distances, indices = index.search(np.array(query_embedding), 1)

    best_distance = distances[0][0]
    best_index = indices[0][0]

    if best_distance < threshold:  # closer means more similar
        question = df.iloc[best_index]['question']
        answer = df.iloc[best_index]['rephrased_answer']
        return answer
    else:
        return "I'm not sure about that. Could you rephrase or ask something else?"

print(find_best_faq_match("Can I track my pizza order?"))
# Output: I'm not sure about that. Could you rephrase or ask something else?

print(find_best_faq_match("How do I complete my KYC?"))
# Output: <KYC-related answer>

def chat_with_bot():
    print("🤖 Hi! Ask me anything about Jupiter's services. Type 'exit' to stop.\n")

    while True:
        user_input = input("You: ")
        if user_input.lower() in ['exit', 'quit']:
            print("🤖 Bye! Have a great day.")
            break

        response = find_best_faq_match(user_input)
        print(f"🤖 {response}\n")

chat_with_bot()

#!pip install streamlit

import streamlit as st

st.title("🧠 Jupiter FAQ Bot")
st.write("Ask me anything about Jupiter's services!")

user_input = st.text_input("Your Question")

if user_input:
    response = find_best_faq_match(user_input)
    st.markdown(f"**🤖 Answer:** {response}")

#

